Revealing the secrets: A real 2 layer scroll on C64.
----------------------------------------------------

There are many games which contains 2 layer scroller. Mostly the back layer is just a simple graphics. But if you played 'Flimbo's Quest' you
surelly know what a real 2 layer scroller is. I was really amazed by this and I couldn't figure out how the heck was this done. I was thinking
for about a month, but nothing. One day I had enough of it and disassembled the god damn code. After few long nights with beer and
drugs, I found the trick. (Actually, the only drug was cool music). I'll try to explain this 'cause I'm sure that most of you will be interested in
it.

Let's first think about non smooth (whole character) scroll. We have two maps which one of it should overlap the other. Two pointers exist
(one for each map) which holds the current position in the map. Lets suppose the scroller runs automaticly without reading the joystick (like
in the high-scores). In each frame, the front layer pointer is increased by 1. But the back layer pointer is increased every second frame.
Each time the screen should be reprinted, we copy the front map (from current position) to screen. This map contains characters with code
0 at all spots where the back layer should be printed. After this is done, the back layer characters are printed at all spots with chars 0.

So far so good. But, what about smooth scroll. Actually, there are four Character Sets. Yeah, I know you wonder why. Well, this is the most
important part. All chars from the front layer are the same in all 4 charsets. This means if you have the picture on screen and you change
between each charsets, the picture will be the same (e.g. Nothing moves in the front layer). But you can see the back layer moving by two
pixels. Actually, the character layout is settled that way so the back layer moves when you change the charset.

In Flimbo actually, there is a different approach. The 0 chars I mentioned are in different map. There is one (16 bit) pointer for the map pos
and one pointer for the X-Scroll (reg. $D016). When the game need to paint the map it first draws the front layer. Then it divides the
pointer by 2 and uses this to draw the back layer. The X-Scroll is multiplied by 2 and then stored in $D016. So in each frame we scroll 2
pixels. In one frame the front and back layer move together by 2 pixels. Each second frame the back layer is moved 2 pixels in opposite
direction (by selecting another charset) giving the effect that the back layer is not moved. Here is the process:

X - X-Scroll (going from 7 to 0)
B - X-Scroll * 2 (the actuall value written in $D016)
C - Charset

X=3, B=6, C=4,
X=2, B=4, C=4,
X=1, B=2, C=6,
X=0, B=0, C=6,
- Only the front layer moves by whole character now.
X=7, B=6, C=0,
X=6, B=4, C=0,
X=5, B=2, C=2,
X=4, B=0, C=2,
- Both layers move by whole character.

The process repeats now.
The charsets are setteled like this: C=0 (most left), C=6 (most right)
If you wonder why C always differs by 2, this is because the LSB of $D018 is unused.

If you want to experiment, here are the addresses I found when I was disassembling this (on 20 August 2001).

$7900 (30976) - The start address of the game.
$7CFD (31997) - Here starts the scroll routine in the high scores. Anything you change here will affect the high scores scroller.
$1000 (4096) - The routine that prints the characters of both layers on screen.

I also found the music addresses.
$5500 (Initialise music)
$5506 (Play music)
